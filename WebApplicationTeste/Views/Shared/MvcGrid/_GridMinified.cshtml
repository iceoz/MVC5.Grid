@using TCEPR.Mvc.Grid;

@model IGrid

@{
    bool hasGroupTitle = false;
    string actualGroup = "";
    Dictionary<string, int> groupTitles = new Dictionary<string, int>();
    foreach (var column in Model.Columns)
    {
        if (!String.IsNullOrEmpty(column.GroupTitle) && column.IsVisible)
        {
            hasGroupTitle = true;
            if (!groupTitles.ContainsKey(column.GroupTitle))
            {
                groupTitles.Add(column.GroupTitle, 0);
            }

            groupTitles[column.GroupTitle] += 1;
        }
    }

    IList<IGridRow> lstRow = Model.Rows.ToList();
    IList<IGridColumn> lstCol = Model.Columns.ToList();

    IList<GridRowMinified> tblRows = new List<GridRowMinified>();
    int rowspan = 0;
    int maiorDataIndex = 1;
    bool seletorCor = false;


    if (lstRow.Count > 0)
    {
        //Cria um dicionario de "indice_da_colunaXminificação" e aplica as devidas regras
        Dictionary<int, bool> colXmin = new Dictionary<int, bool>();
        for (int j = lstCol.Count - 1; j > -1; j--)
        {
            IGridColumn col = lstCol[j];
            //Se uma coluna é minificada, todas as anteriores obrigatoriamente também são
            if (col.IsMinified)
            {
                for (int jj = j; jj > -1; jj--)
                {
                    colXmin.Add(jj, true);
                }
                break;
            }
            else
            {
                colXmin.Add(j, false);
            }
        }

        //Monta uma matriz que será utilizada para montar o html
        for (int i = 0; i < lstRow.Count; i++)
        {
            IGridRow row = lstRow[i];
            List<GridColumnMinified> tblCols = new List<GridColumnMinified>();

            for (int j = 0; j < lstCol.Count; j++)
            {
                IGridColumn col = lstCol[j];

                string strVal = HttpUtility.HtmlDecode(col.ValueFor(row).ToString());
                tblCols.Add(
                    new GridColumnMinified()
                    {
                        CssClasses = col.CssClasses + " " + col.CssClassesFor(row),
                        StyleInline = col.StyleInline + " " + col.StyleInlineFor(row),
                        Rowspan = 1,
                        Value = strVal,
                        Visible = true,
                        IsMinified = colXmin[j]
                    }
                );
            }
            tblRows.Add(
                new GridRowMinified()
                {
                    CssClasses = row.CssClasses,
                    Columns = tblCols,
                    DataIndex = 0,
                    Name = string.Empty
                }
            );
        }

        if (true)
        {
            Dictionary<int, string> valoresAtuais = new Dictionary<int, string>();
            foreach (GridColumnMinified col in tblRows[0].Columns)
            {
                valoresAtuais.Add(tblRows[0].Columns.IndexOf(col), col.Value);
            }

            int colunaDefineLinha = 0;
            bool trocouLinha = false;

            //Adiciona as tags de minificação começando pela segunda linha
            for (int i = 1; i < tblRows.Count; i++)
            {
                GridRowMinified row = tblRows[i];
                trocouLinha = false;

                for (int j = 0; j < row.Columns.Count; j++)
                {
                    GridColumnMinified col = row.Columns[j];
                    if (col.IsMinified)
                    {
                        if (trocouLinha)
                        {
                            break;
                        }

                        string valAtual = valoresAtuais[j] ?? string.Empty;

                        if (col.Value == valAtual && !trocouLinha)
                        {
                            col.Value = Model.TagMinified;
                        }
                        else
                        {
                            if (j == colunaDefineLinha)
                            {
                                trocouLinha = true;
                                foreach (GridColumnMinified colAtualizacao in tblRows[i].Columns)
                                {
                                    valoresAtuais[tblRows[i].Columns.IndexOf(colAtualizacao)] = colAtualizacao.Value;
                                }
                            }
                            else
                            {
                                valoresAtuais[j] = col.Value;
                            }
                        }
                    }
                }
            }
        }

        //Filtra a matriz
        for (int i = 0; i < tblRows.Count; i++)
        {
            GridRowMinified row = tblRows[i];

            if (row.DataIndex == 0)
            {
                row.DataIndex = i + 1;
                row.Name = "linha_" + (i + 1);
            }

            for (int j = 0; j < row.Columns.Count; j++)
            {
                GridColumnMinified col = row.Columns[j];

                if (col.Visible)
                {
                    //Valida as linhas posteriores e faz a contagem para o rowspan
                    rowspan = 1;
                    for (int iV = i + 1; iV < tblRows.Count; iV++)
                    {
                        GridRowMinified rowVal = tblRows[iV];
                        GridColumnMinified colVal = rowVal.Columns[j];
                        if (colVal.Value == Model.TagMinified)
                        {
                            rowspan++;
                            colVal.Visible = false;

                            if (rowVal.DataIndex == 0)
                            {
                                rowVal.DataIndex = (i + 1);
                                rowVal.Name = "linha_" + (i + 1);
                            }
                        }
                        else
                        {
                            break;
                        }

                    }
                    //Seta o rowspan na coluna
                    if (rowspan > 1)
                    {
                        col.Rowspan = rowspan;
                        col.StyleInline += " vertical-align: middle;";
                    }

                }
            }

            if (maiorDataIndex != row.DataIndex)
            {
                seletorCor = !seletorCor;
                maiorDataIndex = row.DataIndex;
            }

            if (seletorCor)
            {
                row.DataColor = 1;
            }
            else
            {
                row.DataColor = 0;
            }

        }

    }
}

<div class="mvc-grid" data-name="@Model.Name" data-ajax-url="@Model.AjaxUrl" data-loading-text="@Model.LoadingText" data-loading-gif="@Model.LoadingGif">
    <table class="table mvc-grid-table mvc-grid-table-minified @Model.CssClasses" border="1">
        <thead>
            <tr>
                @foreach (IGridColumn column in Model.Columns)
                {
                    if (column.IsVisible)
                    {
                        if (!hasGroupTitle || (hasGroupTitle && String.IsNullOrEmpty(column.GroupTitle)))
                        {

                            String filterableClass = column.IsFilterable == true ? "filterable" : null;
                            String sortableClass = column.IsSortable == true ? "sortable" : null;
                            String doubleHeaderClass = (hasGroupTitle && String.IsNullOrEmpty(column.GroupTitle)) ? "mvc-grid-double-vertical-header" : null;

                            <th class="mvc-grid-header @filterableClass @sortableClass @column.CssClasses @doubleHeaderClass"
                                data-name="@column.Name"
                                data-filterable="@column.IsFilterable"
                                data-filter-name="@column.FilterName"
                                data-filter-multi="@column.IsMultiFilterable"
                                data-filter-first-type="@(column.Filter != null && column.Filter.First != null
                            ? column.Filter.First.Type : "")"
                                data-filter-first-val="@(column.Filter != null && column.Filter.First != null
                            ? column.Filter.First.Value : "")"
                                data-filter-operator="@(column.Filter != null ? column.Filter.Operator : "")"
                                data-filter-second-type="@(column.Filter != null && column.Filter.Second != null
                            ? column.Filter.Second.Type : "")"
                                data-filter-second-val="@(column.Filter != null && column.Filter.Second != null
                            ? column.Filter.Second.Value : "")"
                                data-sortable="@column.IsSortable"
                                data-sort-order="@column.SortOrder"
                                data-sort-first="@column.FirstSortOrder"
                                title="@column.Tooltip"
                                rowspan="@(hasGroupTitle && String.IsNullOrEmpty(column.GroupTitle) ? 2 : 1)"
                                style="@column.StyleInline">
                                <span class="mvc-grid-header-title">@column.Title</span>
                                @if (column.IsSortable == true)
                                {
                                    <span class="mvc-grid-sort @column.SortOrder.ToString().ToLower()"></span>
                                }
                                @if (column.IsFilterable == true)
                                {
                                    String filterApplied = column.Filter != null && (column.Filter.First != null || column.Filter.Second != null) ? "applied" : "";
                                    <span class="mvc-grid-filter @filterApplied"></span>
                                }
                            </th>
                        }
                        else if (!String.IsNullOrEmpty(column.GroupTitle) && actualGroup != column.GroupTitle)
                        {
                            String doubleHeaderClass = (hasGroupTitle && String.IsNullOrEmpty(column.GroupTitle)) ? "mvc-grid-double-horizontal-header" : null;

                            actualGroup = column.GroupTitle;
                            <th colspan="@groupTitles[actualGroup]" style="text-align:center;" class="mvc-grid-header @doubleHeaderClass" title="@column.GroupTooltip">
                                <span class="mvc-grid-header-title">@actualGroup</span>
                            </th>
                        }
                    }
                }
            </tr>
            @if (hasGroupTitle)
            {
                <tr>
                    @foreach (IGridColumn column in Model.Columns)
                    {
                        if (column.IsVisible)
                        {
                            if (!String.IsNullOrEmpty(column.GroupTitle))
                            {

                                String filterableClass = column.IsFilterable == true ? "filterable" : null;
                                String sortableClass = column.IsSortable == true ? "sortable" : null;

                                <th class="mvc-grid-header @filterableClass @sortableClass @column.CssClasses"
                                    data-name="@column.Name"
                                    data-filterable="@column.IsFilterable"
                                    data-filter-name="@column.FilterName"
                                    data-filter-multi="@column.IsMultiFilterable"
                                    data-filter-first-type="@(column.Filter != null && column.Filter.First != null
                                    ? column.Filter.First.Type : "")"
                                    data-filter-first-val="@(column.Filter != null && column.Filter.First != null
                                    ? column.Filter.First.Value : "")"
                                    data-filter-operator="@(column.Filter != null ? column.Filter.Operator : "")"
                                    data-filter-second-type="@(column.Filter != null && column.Filter.Second != null
                                    ? column.Filter.Second.Type : "")"
                                    data-filter-second-val="@(column.Filter != null && column.Filter.Second != null
                                    ? column.Filter.Second.Value : "")"
                                    data-sortable="@column.IsSortable"
                                    data-sort-order="@column.SortOrder"
                                    data-sort-first="@column.FirstSortOrder"
                                    title="@column.Tooltip"
                                    style="@column.StyleInline">
                                    <span class="mvc-grid-header-title">@column.Title</span>
                                    @if (column.IsSortable == true)
                                    {
                                        <span class="mvc-grid-sort @column.SortOrder.ToString().ToLower()"></span>
                                    }
                                    @if (column.IsFilterable == true)
                                    {
                                        String filterApplied = column.Filter != null && (column.Filter.First != null || column.Filter.Second != null) ? "applied" : "";
                                        <span class="mvc-grid-filter @filterApplied"></span>
                                    }
                                </th>
                            }
                        }
                    }
                </tr>
            }
        </thead>
        @if (tblRows.Count > 0)
        {
            var dcRows = new Dictionary<int, List<GridRowMinified>>();

            foreach (var row in tblRows)
            {
                if (!dcRows.ContainsKey(row.DataIndex))
                {
                    dcRows.Add(row.DataIndex, new List<GridRowMinified>());
                }

                dcRows[row.DataIndex].Add(row);
            }

            foreach (var groupRows in dcRows)
            {
                <tbody>
                    @foreach (GridRowMinified row in groupRows.Value)
                    {
                        <tr class="mvc-grid-row @row.CssClasses" data-index="@row.DataIndex" name="@row.Name" data-color="@row.DataColor">
                            @foreach (GridColumnMinified col in row.Columns)
                            {
                                if (col.Visible)
                                {
                                    <td class="@col.CssClasses" style="@col.StyleInline" rowspan="@col.Rowspan">@col.Value</td>
                                }
                            }
                        </tr>
                    }
                </tbody>
            }
        }
        else
        {
            <tbody>
                <tr>
                    <td class="mvc-grid-table-empty" colspan="@Model.Columns.Count(x => x.IsVisible)">
                        @Model.EmptyText
                    </td>
                </tr>
            </tbody>
        }
    </table>
    @if (Model.Pager != null)
    {
        @Html.Partial(Model.Pager.PartialViewName, Model.Pager)
    }
</div>