; var MvcGrid = (function () { function a(f, d) { this.columns = []; this.element = f; d = d || {}; this.name = f.data("name") || ""; this.rowClicked = d.rowClicked; this.reloadEnded = d.reloadEnded; this.reloadFailed = d.reloadFailed; this.reloadStarted = d.reloadStarted; this.sourceUrl = d.sourceUrl || f.data("source-url") || ""; this.ajaxUrl = f.data("ajax-url"); this.loadingText = d.loadingText || f.data("loading-text"); this.loadingGif = d.loadingGif || f.data("loading-gif"); this.loadingAux = null; this.hasLoading = this.loadingText != "" || this.loadingGif != ""; this.filters = $.extend({ Text: new MvcGridTextFilter(), Date: new MvcGridDateFilter(), Number: new MvcGridNumberFilter(), Boolean: new MvcGridBooleanFilter() }, d.filters); if (this.ajaxUrl != "") { d.isLoaded = true; this.sourceUrl = this.ajaxUrl } if (this.sourceUrl != "") { var c = this.sourceUrl.indexOf("?"); if (c > -1) { this.gridQuery = this.sourceUrl.substring(c + 1); this.sourceUrl = this.sourceUrl.substring(0, c) } else { this.gridQuery = d.query || "" } } else { this.gridQuery = window.location.search.replace("?", "") } if (d.reload === true || (this.sourceUrl != "" && !d.isLoaded)) { this.reload(this.gridQuery); return } var j = f.find(".mvc-grid-header"); for (var e = 0; e < j.length; e++) { var g = this.createColumn($(j[e])); this.applyFiltering(g); this.applySorting(g); this.columns.push(g); this.cleanHeader(g) } var b = f.find(".mvc-grid-pager span"); for (var h = 0; h < b.length; h++) { this.applyPaging($(b[h])) } this.bindGridEvents(); this.cleanGrid(f) } a.prototype = { createColumn: function (b) { return { name: b.data("name") || "", header: b, filter: { isEnabled: b.data("filterable") == "True", isMulti: b.data("filter-multi") == "True", operator: b.data("filter-operator") || "", name: b.data("filter-name") || "", first: { type: b.data("filter-first-type") || "", val: b.data("filter-first-val") || "" }, second: { type: b.data("filter-second-type") || "", val: b.data("filter-second-val") || "" } }, sort: { isEnabled: b.data("sortable") == "True", firstOrder: b.data("sort-first") || "", order: b.data("sort-order") || "" } } }, set: function (b) { this.filters = $.extend(this.filters, b.filters); this.rowClicked = b.rowClicked || this.rowClicked; this.reloadEnded = b.reloadEnded || this.reloadEnded; this.reloadFailed = b.reloadFailed || this.reloadFailed; this.reloadStarted = b.reloadStarted || this.reloadStarted; if (b.reload === true) { this.reload(this.gridQuery) } }, applyFiltering: function (c) { var b = this; if (c.filter.isEnabled) { c.header.find(".mvc-grid-filter").on("click.mvcgrid", function () { b.renderFilter(c) }) } }, applySorting: function (c) { var b = this; if (c.sort.isEnabled) { c.header.on("click.mvcgrid", function (f) { var d = $(f.target || f.srcElement); if (!d.hasClass("mvc-grid-filter") && d.parents(".mvc-grid-filter").length == 0) { b.reload(b.formSortQuery(c)) } }) } }, applyPaging: function (b) { var d = b.data("page") || ""; var c = this; if (d != "") { b.on("click.mvcgrid", function () { c.reload(c.formPageQuery(d)) }) } }, reload: function (c) { var b = this; if (b.sourceUrl != "") { if (b.reloadStarted) { b.reloadStarted(b) } if (b.loadingAux != null) { b.loadingAux.abort() } if (b.hasLoading) { $(".mvc-grid-loading", b.element).remove(); var d = '<div class="mvc-grid-loading">'; if (b.loadingGif != "") { d += '<img src="' + b.loadingGif + '" alt="..." />' } if (b.loadingText != "") { d += "<div>" + b.loadingText + "</div>" } d += "</div>"; $("table", b.element).after(d) } window.setTimeout(function () { b.loadingAux = $.ajax({ url: b.sourceUrl + "?" + c }).success(function (e) { if (b.reloadEnded) { b.reloadEnded(b) } $newGrid = $(e); $(b.element).replaceWith($newGrid); $newGrid.mvcgrid({ reloadStarted: b.reloadStarted, reloadFailed: b.reloadFailed, reloadEnded: b.reloadEnded, rowClicked: b.rowClicked, sourceUrl: b.sourceUrl, filters: b.filters, isLoaded: true, query: c, loadingText: b.loadingText, loadingGif: b.loadingGif }) }).error(function (e) { if (b.reloadFailed) { b.reloadFailed(b, e) } }) }, b.hasLoading ? 300 : 0) } else { window.location.href = "?" + c } }, renderFilter: function (d) { var c = $("body").children(".mvc-grid-popup"); var b = this.filters[d.filter.name]; if (b) { b.render(c, d.filter); b.init(this, d, c); this.setFilterPosition(d, c); c.addClass("open"); $(window).on("click.mvcgrid", function (g) { var f = $(g.target || g.srcElement); if (!f.hasClass("mvc-grid-filter") && f.parents(".mvc-grid-popup").length == 0 && !f.is('[class*="ui-datepicker"]') && f.parents('[class*="ui-datepicker"]').length == 0) { $(window).off("click.mvcgrid"); c.removeClass("open") } }) } else { $(window).off("click.mvcgrid"); c.removeClass("open") } }, setFilterPosition: function (f, c) { var d = f.header.find(".mvc-grid-filter"); var k = c.find(".popup-arrow"); var g = d.offset().left; var i = d.offset().top; var b = d.height(); var e = $(window).width(); var j = c.width(); var l = i + b / 2 + 14; var m = g - 8; var h = 15; if (g + j + 5 > e) { m = e - j - 14; h = g - m + 7 } k.css("left", h + "px"); c.css("left", m + "px"); c.css("top", l + "px") }, formFilterQuery: function (g) { var o = encodeURIComponent(this.name + "-" + g.name + "-" + g.filter.second.type); var d = encodeURIComponent(this.name + "-" + g.name + "-" + g.filter.first.type); var b = encodeURIComponent(this.name + "-" + g.name + "-Op"); var f = encodeURIComponent(this.name + "-" + g.name + "-"); var p = encodeURIComponent(g.filter.operator); var j = encodeURIComponent(g.filter.second.val); var k = encodeURIComponent(g.filter.first.val); var h = this.gridQuery.split("&"); var e = false; var c = false; var q = false; var m = []; for (var l = 0; l < h.length; l++) { if (h[l] !== "") { var n = h[l].split("=")[0]; if (n.indexOf(f) == 0) { if (n == b && !q) { if (!g.filter.isMulti) { continue } h[l] = n + "=" + p; q = true } else { if (!c) { h[l] = d + "=" + k; c = true } else { if (c && !e) { if (!g.filter.isMulti) { continue } h[l] = o + "=" + j; e = true } } } } m.push(h[l]) } } if (!c) { m.push(d + "=" + k) } if (!q && g.filter.isMulti) { m.push(b + "=" + p) } if (!e && g.filter.isMulti) { m.push(o + "=" + j) } return m.join("&") }, formFilterQueryWithout: function (e) { var j = encodeURIComponent(this.name + "-" + e.name + "-" + e.filter.second.type); var d = encodeURIComponent(this.name + "-" + e.name + "-" + e.filter.first.type); var b = encodeURIComponent(this.name + "-" + e.name + "-Op"); var c = encodeURIComponent(this.name + "-Page"); var f = this.gridQuery.split("&"); var h = []; for (var g = 0; g < f.length; g++) { var k = f[g].split("=")[0]; if (f[g] != "" && k != c && k != d && (!e.filter.isMulti || (k != b && k != j))) { h.push(f[g]) } } return h.join("&") }, formSortQuery: function (d) { var c = this.addOrReplace(this.gridQuery, this.name + "-Sort", d.name); var b = d.sort.order == "Asc" ? "Desc" : "Asc"; if (d.sort.order == "" && d.sort.firstOrder != "") { b = d.sort.firstOrder } return this.addOrReplace(c, this.name + "-Order", b) }, formPageQuery: function (b) { return this.addOrReplace(this.gridQuery, this.name + "-Page", b) }, addOrReplace: function (g, e, f) { f = encodeURIComponent(f); e = encodeURIComponent(e); var h = g.split("&"); var c = false; var j = []; for (var d = 0; d < h.length; d++) { if (h[d] !== "") { var b = h[d].split("=")[0]; if (b == e) { h[d] = e + "=" + f; c = true } j.push(h[d]) } } if (!c) { j.push(e + "=" + f) } return j.join("&") }, bindGridEvents: function () { var b = this; this.element.find(".mvc-grid-row").on("click.mvcgrid", function () { if (b.rowClicked) { var c = $(this).find("td"); var f = []; for (var e = 0; e < b.columns.length; e++) { var d = b.columns[e]; if (c.length > e) { f[d.name] = $(c[e]).text() } } b.rowClicked(b, this, f) } }) }, cleanHeader: function (b) { var c = b.header; c.removeAttr("data-name"); c.removeAttr("data-filterable"); c.removeAttr("data-filter-name"); c.removeAttr("data-filter-multi"); c.removeAttr("data-filter-operator"); c.removeAttr("data-filter-first-val"); c.removeAttr("data-filter-first-type"); c.removeAttr("data-filter-second-val"); c.removeAttr("data-filter-second-type"); c.removeAttr("data-sortable"); c.removeAttr("data-sort-order"); c.removeAttr("data-sort-first") }, cleanGrid: function (b) { b.removeAttr("data-source-url"); b.removeAttr("data-name") } }; return a })(); var MvcGridTextFilter = (function () { function a() { } a.prototype = { render: function (b, d) { var f = $.fn.mvcgrid.lang.Filter || $.fn.mvcgrid.defaultLang.Filter; var c = $.fn.mvcgrid.lang.Operator; var e = $.fn.mvcgrid.lang.Text; b.html('<div class="popup-arrow"></div><div class="popup-content"><div class="first-filter popup-group"><select class="mvc-grid-type"><option value="Contains"' + (d.first.type == "Contains" ? ' selected="selected"' : "") + ">" + e.Contains + '</option><option value="Equals"' + (d.first.type == "Equals" ? ' selected="selected"' : "") + ">" + e.Equals + '</option><option value="StartsWith"' + (d.first.type == "StartsWith" ? ' selected="selected"' : "") + ">" + e.StartsWith + '</option><option value="EndsWith"' + (d.first.type == "EndsWith" ? ' selected="selected"' : "") + ">" + e.EndsWith + '</option></select></div><div class="first-filter popup-group"><input class="mvc-grid-input" type="text" value="' + d.first.val + '"></div>' + (d.isMulti ? '<div class="popup-group popup-group-operator"><select class="mvc-grid-operator"><option value="">' + c.Select + '</option><option value="And"' + (d.operator == "And" ? ' selected="selected"' : "") + ">" + c.And + '</option><option value="Or"' + (d.operator == "Or" ? ' selected="selected"' : "") + ">" + c.Or + '</option></select></div><div class="second-filter popup-group"><select class="mvc-grid-type"><option value="Contains"' + (d.second.type == "Contains" ? ' selected="selected"' : "") + ">" + e.Contains + '</option><option value="Equals"' + (d.second.type == "Equals" ? ' selected="selected"' : "") + ">" + e.Equals + '</option><option value="StartsWith"' + (d.second.type == "StartsWith" ? ' selected="selected"' : "") + ">" + e.StartsWith + '</option><option value="EndsWith"' + (d.second.type == "EndsWith" ? ' selected="selected"' : "") + ">" + e.EndsWith + '</option></select></div><div class="second-filter popup-group"><input class="mvc-grid-input" type="text" value="' + d.second.val + '"></div>' : "") + '<div class="popup-button-group"><button class="btn btn-success mvc-grid-apply" type="button">' + f.Apply + '</button><button class="btn btn-danger mvc-grid-cancel" type="button">' + f.Remove + "</button></div></div>") }, init: function (c, d, b) { this.bindType(c, d, b); this.bindValue(c, d, b); this.bindApply(c, d, b); this.bindCancel(c, d, b); this.bindOperator(c, d, b) }, bindType: function (d, e, b) { var f = b.find(".first-filter .mvc-grid-type"); f.on("change.mvcgrid", function () { e.filter.first.type = this.value }); f.change(); var c = b.find(".second-filter .mvc-grid-type"); c.on("change.mvcgrid", function () { e.filter.second.type = this.value }); c.change() }, bindValue: function (c, e, b) { var d = b.find(".first-filter .mvc-grid-input"); d.on("keyup.mvcgrid", function (g) { e.filter.first.val = this.value; if (g.which == 13) { b.find(".mvc-grid-apply").click() } }); var f = b.find(".second-filter .mvc-grid-input"); f.on("keyup.mvcgrid", function (g) { e.filter.second.val = this.value; if (g.which == 13) { b.find(".mvc-grid-apply").click() } }) }, bindApply: function (d, e, b) { var c = b.find(".mvc-grid-apply"); c.on("click.mvcgrid", function () { b.removeClass("open"); d.reload(d.formFilterQuery(e)) }) }, bindCancel: function (c, d, b) { var e = b.find(".mvc-grid-cancel"); e.on("click.mvcgrid", function () { b.removeClass("open"); c.reload(c.formFilterQueryWithout(d)) }) }, bindOperator: function (d, e, b) { var c = b.find(".mvc-grid-operator"); c.on("change.mvcgrid", function () { e.filter.operator = this.value }) } }; return a })(); var MvcGridNumberFilter = (function () { function a() { } a.prototype = { render: function (b, d) { var f = $.fn.mvcgrid.lang.Filter || $.fn.mvcgrid.defaultLang.Filter; var c = $.fn.mvcgrid.lang.Operator; var e = $.fn.mvcgrid.lang.Number; b.html('<div class="popup-arrow"></div><div class="popup-content"><div class="first-filter popup-group"><select class="mvc-grid-type"><option value="Equals"' + (d.first.type == "Equals" ? ' selected="selected"' : "") + ">" + e.Equals + '</option><option value="LessThan"' + (d.first.type == "LessThan" ? ' selected="selected"' : "") + ">" + e.LessThan + '</option><option value="GreaterThan"' + (d.first.type == "GreaterThan" ? ' selected="selected"' : "") + ">" + e.GreaterThan + '</option><option value="LessThanOrEqual"' + (d.first.type == "LessThanOrEqual" ? ' selected="selected"' : "") + ">" + e.LessThanOrEqual + '</option><option value="GreaterThanOrEqual"' + (d.first.type == "GreaterThanOrEqual" ? ' selected="selected"' : "") + ">" + e.GreaterThanOrEqual + '</option></select></div><div class="first-filter popup-group"><input class="mvc-grid-input" type="text" value="' + d.first.val + '"></div>' + (d.isMulti ? '<div class="popup-group popup-group-operator"><select class="mvc-grid-operator"><option value="">' + c.Select + '</option><option value="And"' + (d.operator == "And" ? ' selected="selected"' : "") + ">" + c.And + '</option><option value="Or"' + (d.operator == "Or" ? ' selected="selected"' : "") + ">" + c.Or + '</option></select></div><div class="second-filter popup-group"><select class="mvc-grid-type"><option value="Equals"' + (d.second.type == "Equals" ? ' selected="selected"' : "") + ">" + e.Equals + '</option><option value="LessThan"' + (d.second.type == "LessThan" ? ' selected="selected"' : "") + ">" + e.LessThan + '</option><option value="GreaterThan"' + (d.second.type == "GreaterThan" ? ' selected="selected"' : "") + ">" + e.GreaterThan + '</option><option value="LessThanOrEqual"' + (d.second.type == "LessThanOrEqual" ? ' selected="selected"' : "") + ">" + e.LessThanOrEqual + '</option><option value="GreaterThanOrEqual"' + (d.second.type == "GreaterThanOrEqual" ? ' selected="selected"' : "") + ">" + e.GreaterThanOrEqual + '</option></select></div><div class="second-filter popup-group"><input class="mvc-grid-input" type="text" value="' + d.second.val + '"></div>' : "") + '<div class="popup-button-group"><button class="btn btn-success mvc-grid-apply" type="button">' + f.Apply + '</button><button class="btn btn-danger mvc-grid-cancel" type="button">' + f.Remove + "</button></div></div>") }, init: function (c, d, b) { this.bindType(c, d, b); this.bindValue(c, d, b); this.bindApply(c, d, b); this.bindCancel(c, d, b); this.bindOperator(c, d, b) }, bindType: function (d, e, b) { var f = b.find(".first-filter .mvc-grid-type"); f.on("change.mvcgrid", function () { e.filter.first.type = this.value }); f.change(); var c = b.find(".second-filter .mvc-grid-type"); c.on("change.mvcgrid", function () { e.filter.second.type = this.value }); c.change() }, bindValue: function (c, f, b) { var e = this; var d = b.find(".first-filter .mvc-grid-input"); d.on("keyup.mvcgrid", function (h) { f.filter.first.val = this.value; if (e.isValid(this.value)) { $(this).removeClass("invalid"); if (h.which == 13) { b.find(".mvc-grid-apply").click() } } else { $(this).addClass("invalid") } }); if (!e.isValid(f.filter.first.val)) { d.addClass("invalid") } var g = b.find(".second-filter .mvc-grid-input"); g.on("keyup.mvcgrid", function (h) { f.filter.second.val = this.value; if (e.isValid(this.value)) { $(this).removeClass("invalid"); if (h.which == 13) { b.find(".mvc-grid-apply").click() } } else { $(this).addClass("invalid") } }); if (!e.isValid(f.filter.second.val)) { g.addClass("invalid") } }, bindApply: function (d, e, b) { var c = b.find(".mvc-grid-apply"); c.on("click.mvcgrid", function () { b.removeClass("open"); d.reload(d.formFilterQuery(e)) }) }, bindCancel: function (c, d, b) { var e = b.find(".mvc-grid-cancel"); e.on("click.mvcgrid", function () { b.removeClass("open"); c.reload(c.formFilterQueryWithout(d)) }) }, bindOperator: function (d, e, b) { var c = b.find(".mvc-grid-operator"); c.on("change.mvcgrid", function () { e.filter.operator = this.value }) }, isValid: function (c) { if (c == "") { return true } var b = new RegExp("^(?=.*\\d+.*)[-+]?\\d*[.,]?\\d*$"); return b.test(c) } }; return a })(); var MvcGridDateFilter = (function () { function a() { } a.prototype = { render: function (b, e) { var d = '<input class="mvc-grid-input" type="text" value="' + e.first.val + '">'; var g = $.fn.mvcgrid.lang.Filter || $.fn.mvcgrid.defaultLang.Filter; var c = $.fn.mvcgrid.lang.Operator; var f = $.fn.mvcgrid.lang.Date; b.html('<div class="popup-arrow"></div><div class="popup-content"><div class="first-filter popup-group"><select class="mvc-grid-type"><option value="Equals"' + (e.first.type == "Equals" ? ' selected="selected"' : "") + ">" + f.Equals + '</option><option value="LessThan"' + (e.first.type == "LessThan" ? ' selected="selected"' : "") + ">" + f.LessThan + '</option><option value="GreaterThan"' + (e.first.type == "GreaterThan" ? ' selected="selected"' : "") + ">" + f.GreaterThan + '</option><option value="LessThanOrEqual"' + (e.first.type == "LessThanOrEqual" ? ' selected="selected"' : "") + ">" + f.LessThanOrEqual + '</option><option value="GreaterThanOrEqual"' + (e.first.type == "GreaterThanOrEqual" ? ' selected="selected"' : "") + ">" + f.GreaterThanOrEqual + '</option></select></div><div class="first-filter popup-group">' + d + "</div>" + (e.isMulti ? '<div class="popup-group popup-group-operator"><select class="mvc-grid-operator"><option value="">' + c.Select + '</option><option value="And"' + (e.operator == "And" ? ' selected="selected"' : "") + ">" + c.And + '</option><option value="Or"' + (e.operator == "Or" ? ' selected="selected"' : "") + ">" + c.Or + '</option></select></div><div class="second-filter popup-group"><select class="mvc-grid-type"><option value="Equals"' + (e.second.type == "Equals" ? ' selected="selected"' : "") + ">" + f.Equals + '</option><option value="LessThan"' + (e.second.type == "LessThan" ? ' selected="selected"' : "") + ">" + f.LessThan + '</option><option value="GreaterThan"' + (e.second.type == "GreaterThan" ? ' selected="selected"' : "") + ">" + f.GreaterThan + '</option><option value="LessThanOrEqual"' + (e.second.type == "LessThanOrEqual" ? ' selected="selected"' : "") + ">" + f.LessThanOrEqual + '</option><option value="GreaterThanOrEqual"' + (e.second.type == "GreaterThanOrEqual" ? ' selected="selected"' : "") + ">" + f.GreaterThanOrEqual + '</option></select></div><div class="second-filter popup-group">' + d + "</div>" : "") + '<div class="popup-button-group"><button class="btn btn-success mvc-grid-apply" type="button">' + g.Apply + '</button><button class="btn btn-danger mvc-grid-cancel" type="button">' + g.Remove + "</button></div></div>") }, init: function (c, d, b) { this.bindType(c, d, b); this.bindValue(c, d, b); this.bindApply(c, d, b); this.bindCancel(c, d, b); this.bindOperator(c, d, b) }, bindType: function (d, e, b) { var f = b.find(".first-filter .mvc-grid-type"); f.on("change.mvcgrid", function () { e.filter.first.type = this.value }); f.change(); var c = b.find(".second-filter .mvc-grid-type"); c.on("change.mvcgrid", function () { e.filter.second.type = this.value }); c.change() }, bindValue: function (c, e, b) { var d = b.find(".first-filter .mvc-grid-input"); if ($.fn.datepicker) { d.datepicker() } d.on("change.mvcgrid keyup.mvcgrid", function (g) { e.filter.first.val = this.value; if (g.which == 13) { b.find(".mvc-grid-apply").click() } }); var f = b.find(".second-filter .mvc-grid-input"); if ($.fn.datepicker) { f.datepicker() } f.on("change.mvcgrid keyup.mvcgrid", function (g) { e.filter.second.val = this.value; if (g.which == 13) { b.find(".mvc-grid-apply").click() } }) }, bindApply: function (d, e, b) { var c = b.find(".mvc-grid-apply"); c.on("click.mvcgrid", function () { b.removeClass("open"); d.reload(d.formFilterQuery(e)) }) }, bindCancel: function (c, d, b) { var e = b.find(".mvc-grid-cancel"); e.on("click.mvcgrid", function () { b.removeClass("open"); c.reload(c.formFilterQueryWithout(d)) }) }, bindOperator: function (d, e, b) { var c = b.find(".mvc-grid-operator"); c.on("change.mvcgrid", function () { e.filter.operator = this.value }) } }; return a })(); var MvcGridBooleanFilter = (function () { function a() { } a.prototype = { render: function (b, d) { var f = $.fn.mvcgrid.lang.Filter || $.fn.mvcgrid.defaultLang.Filter; var c = $.fn.mvcgrid.lang.Operator; var e = $.fn.mvcgrid.lang.Boolean; b.html('<div class="popup-arrow"></div><div class="popup-content"><div class="first-filter popup-group"><ul class="mvc-grid-boolean-filter"><li ' + (d.first.val == "True" ? 'class="active" ' : "") + 'data-value="True">' + e.Yes + "</li><li " + (d.first.val == "False" ? 'class="active" ' : "") + 'data-value="False">' + e.No + "</li></ul></div>" + (d.isMulti ? '<div class="popup-group popup-group-operator"><select class="mvc-grid-operator"><option value="">' + c.Select + '</option><option value="And"' + (d.operator == "And" ? ' selected="selected"' : "") + ">" + c.And + '</option><option value="Or"' + (d.operator == "Or" ? ' selected="selected"' : "") + ">" + c.Or + '</option></select></div><div class="second-filter popup-group"><ul class="mvc-grid-boolean-filter"><li ' + (d.second.val == "True" ? 'class="active" ' : "") + 'data-value="True">' + e.Yes + "</li><li " + (d.second.val == "False" ? 'class="active" ' : "") + 'data-value="False">' + e.No + "</li></ul></div>" : "") + '<div class="popup-button-group"><button class="btn btn-success mvc-grid-apply" type="button">' + f.Apply + '</button><button class="btn btn-danger mvc-grid-cancel" type="button">' + f.Remove + "</button></div></div>") }, init: function (c, d, b) { this.bindValue(c, d, b); this.bindApply(c, d, b); this.bindCancel(c, d, b); this.bindOperator(c, d, b) }, bindValue: function (d, f, c) { var e = c.find(".first-filter .mvc-grid-boolean-filter li"); f.filter.first.type = "Equals"; e.on("click.mvcgrid", function () { var g = $(this); f.filter.first.val = g.data("value"); g.siblings().removeClass("active"); g.addClass("active") }); var b = c.find(".second-filter .mvc-grid-boolean-filter li"); f.filter.second.type = "Equals"; b.on("click.mvcgrid", function () { var g = $(this); f.filter.second.val = g.data("value"); g.siblings().removeClass("active"); g.addClass("active") }) }, bindApply: function (d, e, b) { var c = b.find(".mvc-grid-apply"); c.on("click.mvcgrid", function () { b.removeClass("open"); d.reload(d.formFilterQuery(e)) }) }, bindCancel: function (c, d, b) { var e = b.find(".mvc-grid-cancel"); e.on("click.mvcgrid", function () { b.removeClass("open"); c.reload(c.formFilterQueryWithout(d)) }) }, bindOperator: function (d, e, b) { var c = b.find(".mvc-grid-operator"); c.on("change.mvcgrid", function () { e.filter.operator = this.value }) } }; return a })(); $.fn.mvcgrid = function (a) { return this.each(function () { if (!$.data(this, "mvc-grid")) { $.data(this, "mvc-grid", new MvcGrid($(this), a)) } else { if (a) { $.data(this, "mvc-grid").set(a) } } }) }; $.fn.mvcgrid.defaultLang = { Text: { Contains: "Contains", Equals: "Equals", StartsWith: "Starts with", EndsWith: "Ends with" }, Number: { Equals: "Equals", LessThan: "Less than", GreaterThan: "Greater than", LessThanOrEqual: "Less than or equal", GreaterThanOrEqual: "Greater than or equal" }, Date: { Equals: "Equals", LessThan: "Is before", GreaterThan: "Is after", LessThanOrEqual: "Is before or equal", GreaterThanOrEqual: "Is after or equal" }, Boolean: { Yes: "Yes", No: "No" }, Filter: { Apply: "&#10004;", Remove: "&#10008;" }, Operator: { Select: "", And: "and", Or: "or" } }; $.fn.mvcgrid.lang = $.fn.mvcgrid.defaultLang; $(function () { $("body").append('<div class="mvc-grid-popup"></div>'); $(window).resize(function () { $(".mvc-grid-popup").removeClass("open") }) });